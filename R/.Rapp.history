plot((ts(sample(1:10,10,rep=T),start=c(2010),frequency=2)),type="o",xlab="",ylab="Taille (mm)")
tailles <- c(3.904, rep(NA, 9))
ts(tailles,start=2010, freq=2)
bla<- ts(tailles,start=2010, freq=2)
bla
print(bla)
bla<- ts(tailles,start=c(2010,"march"), freq=2)
bla<- ts(tailles,start=c(2010,3), freq=2)
bla
cycle(bla)
bla<- ts(tailles,start=2010, freq=2)
cycle(bla)
?ISOdate
ISOdate(2010,month=3,1)
ISOdate(2010,month=seq(3,21,6),1)
?months()
ISOdate(2010:2014,month=c(3,9),1)
months(ISOdate(2010:2014,month=c(3,9),1))
months(ISOdate(rep(2010:2014,each=2),month=c(3,9),1))
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%m%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%M%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%M-%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%m-%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%month-%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%b-%y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%b-%Y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9)),"%b-%Y")
format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%b-%Y")
?format(ISOdate(rep(2010:2014,each=2),month=c(3,9),1),"%b-%Y")
tailles
tailles <- ts(tailles, freq=2,start=2010)
tailles
tailles[1]
tailles[2]
tailles[2] <- 6
tailles
plot(tailles, xlab = "", xaxt = "n", type = "o") axis(1, at = 1:10, labels = dates, las = 2)
plot(tailles, xlab = "", xaxt = "n", type = "o") ;axis(1, at = 1:10, labels = dates, las = 2)
dates
plot(tailles, xlab = "", xaxt = "n", type = "o")
tailles
plot(tailles, xlab = "", xaxt = "", type = "o")
plot(tailles, xlab = "", type = "o")
plot(tailles, xlab = "", type = "o",las=2)
axis(1,at=1:10)
axis(3,at=1:10)
?axis
library(marmap)
get.depth
locator()
axis(3,at=seq(2010,2014,0.5),labels=dates)
axis(3,at=seq(2010,2014.5,0.5),labels=dates)
axis(3,at=seq(2010,2014.5,0.5),labels=dates,las=2)
library(marmap)
read.bathy
dat <- read.bathy("http://data.bshc.pro/ogc/bsbd-0.9.3?SERVICE=wcs&VERSION=1.0.0&REQUEST=GetCoverage&coverage=bsbd&CRS=EPSG:4326&bbox=16.09796953042469,57.65116108642085,20.194991813051224,59.064581409419176&width=478&height=315&format=XYZ")
as.bathy
dat <- read.bathy("http://data.bshc.pro/ogc/bsbd-0.9.3?SERVICE=wcs&VERSION=1.0.0&REQUEST=GetCoverage&coverage=bsbd&CRS=EPSG:4326&bbox=16.09796953042469,57.65116108642085,20.194991813051224,59.064581409419176&width=478&height=315&format=XYZ", sep=" ")
summary(dat)
plot(dat)
plot(-dat)
plot(-dat,im=T)
20+27+50+32+20+47.37+60+20+48+58+89+86+60.59+84.49+
0
20+27+50+32+20+47.37+60+20+48+58+89+86+60.59+84.49
library(xtable)
?print.xtable
d<-data.frame(feature=c("red","blue","green","yellow","red","blue","green","yellow"), group=c(rep("a",4),rep("b",4)),is_there=c(0,1,1,0,1,1,1,0))
d
tapply(d$feature,group, function (x) x[d$is_there==1])
tapply(d$feature,d$group, function (x) x[d$is_there==1])
tapply(d$feature,d$group, function (x) table(x[d$is_there==1]))
tapply(d$feature,d$group, table)
tapply(d$feature[d$is_there],d$group, table)
tapply(d$feature[d$is_there==1],d$group[d$is_there==1], table)
iris
iris[order(iris$species)]
sort(iris$Species)
iris$Species <- factor(iris$Species, labels=c("virginica","setosa","versicolor"),ordered=TRUE)
irirs
iris
rm(iris)
iris
?order
iris[order(iris$Species)]
iris[order(iris$Species),]
which(irs$Species=="virginica")
which(iris$Species=="virginica")
iris[which(iris$Species=="virginica"), which(iris$Species=="setosa"), which(iris$Species=="versicolor"),]
iris[c(which(iris$Species=="virginica"), which(iris$Species=="setosa"), which(iris$Species=="versicolor")),]
library(marmap)
data(aleutians)
dat <- as.raster(aleutians)
plot(dat)
dat
?shift
dat2 <- shift(dat,x=360)
dat2 <- raster::shift(dat,x=360)
as.bathy(dat2)->aleu2
summary(aleu2)
dat2 <- raster::shift(dat,x=ro-360)
dat2 <- raster::shift(dat,x=dat-360)
as.bathy(dat2)->aleu2
summary(aleu2)
dat <- as.raster(aleutians)
dat2 <- raster::shift(dat,x=dat-360)
as.bathy(dat2)->aleu2
summary(aleu2)
dat <- as.raster(aleutians)
dat2 <- raster::shift(dat,x=dat-180)
as.bathy(dat2)->aleu2
summary(aleu2)
dat <- as.raster(aleutians)
dat2 <- raster::shift(dat,y=dat-180)
as.bathy(dat2)->aleu2
summary(aleu2)
summary(aleutians)
dat <- as.raster(aleutians)
dat
as.bathy(dat)
dat <- as.raster(aleutians)#
#
dat2 <- as.bathy(dat)
summary(dat2)
names <- as.numeric(row.names(dat2))
names
names[names>=180] <- names[names>=180]-360
names
rownames(dat2) <- names
summary(dat2)
as.raster(dat2)
image(dat2)
dput(dat)
cor
library(car)
install.packages("car")
library(rgl)
example(plot.bathy)
library(marmap)
example(plot.bathy)
#Append ! to string, otherwise increment#
myFun <- function(x){#
    if (is.character(x)){#
    return(paste(x,"!",sep=""))#
    }#
    else{#
    return(x + 1)#
    }#
}#
#
#A nested list structure#
l <- list(a = list(a1 = "Boo", b1 = 2, c1 = "Eeek"), #
          b = 3, c = "Yikes", #
          d = list(a2 = 1, b2 = list(a3 = "Hey", b3 = 5)))#
#Result is named vector, coerced to character           #
rapply(l,myFun)#
#
#Result is a nested list like l, with values altered#
rapply(l, myFun, how = "replace")
1280/seq(1,2,.1)
1280/1.6
720/1.6
library(marmap)
search()
gombathy<-getNOAA.bathy(-98, -79, 18,32)
summary(gombathy)
glat<-seq(27,29,1)#
glon<-rep(-93,length(glat))#
data.frame(glon,glat)
plot(gombathy)
points(glon,glat)
get.depth(gombathy, x=glon, y=glat, locator=FALSE)
get.depth
get.depth(gombathy, x=glon, y=glat, locator=FALSE)
glat<-seq(27,30,1)#
glon<-rep(-93,length(glat))
data.frame(glon,glat)
get.depth(gombathy, x=glon, y=glat, locator=FALSE)
glat<-seq(27,30,1)#
glon<-c(-93,-94,-95,-96)
get.depth(gombathy, x=glon, y=glat, locator=FALSE)
?get.depth
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE)
example(get.depth)
get.depth
ls()
mat <- gombathy
x = glon
y = glat
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE)
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist-T)
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist+T)
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist=T)
glon
glat
if (!is(mat, "bathy")) #
        stop("'mat' must be of class 'bathy'")#
    if (locator == FALSE) {#
        if (!is.null(y) & !is.vector(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (!is.null(y) & !is.numeric(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (is.list(x)) {#
            if (length(x) != 2) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.vector(x[[1]]) | !is.vector(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (length(x[[1]]) != length(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.null(y)) #
                warning("'y' has been ignored\n")#
            coord <- x#
            names(coord) <- c("x", "y")#
        }#
        if (is.data.frame(x) | is.matrix(x)) {#
            x <- as.matrix(x)#
            if (ncol(x) > 2) {#
                warning("'x' has too many columns. Only the first two will be considered\n")#
                x <- x[, 1:2]#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("only the first two columns of 'x' were considered. 'y' has been ignored\n")#
            }#
            if (ncol(x) == 2) {#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("since 'x' has 2 columns, 'y' has been ignored\n")#
            }#
            if (ncol(x) == 1) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must supply both 'x' and 'y' or a 2-column matrix-like 'x'")#
                coord <- list(x = x, y = y)#
            }#
        }#
        if (!is.list(x)) {#
            if (is.vector(x) & !is.numeric(x)) #
                stop("'x' must be numeric")#
            if (is.vector(x) & is.numeric(x)) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must either provide both 'x' and 'y' or a 2-column matrix-like 'x'")#
                if (length(x) != length(y)) #
                  warning("The lengths of 'x' and 'y' differ. Some values have been recycled\n")#
                coord <- list(x = x, y = y)#
            }#
        }#
    }#
    else {#
        cat("Waiting for interactive input: click any number of times on the map, then press 'Esc'\n")#
        coord <- locator(type = "p", ...)#
    }
locator <= FALSE
locator <- FALSE
if (!is(mat, "bathy")) #
        stop("'mat' must be of class 'bathy'")#
    if (locator == FALSE) {#
        if (!is.null(y) & !is.vector(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (!is.null(y) & !is.numeric(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (is.list(x)) {#
            if (length(x) != 2) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.vector(x[[1]]) | !is.vector(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (length(x[[1]]) != length(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.null(y)) #
                warning("'y' has been ignored\n")#
            coord <- x#
            names(coord) <- c("x", "y")#
        }#
        if (is.data.frame(x) | is.matrix(x)) {#
            x <- as.matrix(x)#
            if (ncol(x) > 2) {#
                warning("'x' has too many columns. Only the first two will be considered\n")#
                x <- x[, 1:2]#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("only the first two columns of 'x' were considered. 'y' has been ignored\n")#
            }#
            if (ncol(x) == 2) {#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("since 'x' has 2 columns, 'y' has been ignored\n")#
            }#
            if (ncol(x) == 1) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must supply both 'x' and 'y' or a 2-column matrix-like 'x'")#
                coord <- list(x = x, y = y)#
            }#
        }#
        if (!is.list(x)) {#
            if (is.vector(x) & !is.numeric(x)) #
                stop("'x' must be numeric")#
            if (is.vector(x) & is.numeric(x)) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must either provide both 'x' and 'y' or a 2-column matrix-like 'x'")#
                if (length(x) != length(y)) #
                  warning("The lengths of 'x' and 'y' differ. Some values have been recycled\n")#
                coord <- list(x = x, y = y)#
            }#
        }#
    }#
    else {#
        cat("Waiting for interactive input: click any number of times on the map, then press 'Esc'\n")#
        coord <- locator(type = "p", ...)#
    }
if (!is(mat, "bathy")) #
        stop("'mat' must be of class 'bathy'")#
    if (locator == FALSE) {#
        if (!is.null(y) & !is.vector(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (!is.null(y) & !is.numeric(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (is.list(x)) {#
            if (length(x) != 2) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.vector(x[[1]]) | !is.vector(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (length(x[[1]]) != length(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.null(y)) #
                warning("'y' has been ignored\n")#
            coord <- x#
            names(coord) <- c("x", "y")#
        }#
        if (is.data.frame(x) | is.matrix(x)) {#
            x <- as.matrix(x)#
            if (ncol(x) > 2) {#
                warning("'x' has too many columns. Only the first two will be considered\n")#
                x <- x[, 1:2]#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("only the first two columns of 'x' were considered. 'y' has been ignored\n")#
            }#
            if (ncol(x) == 2) {#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("since 'x' has 2 columns, 'y' has been ignored\n")#
            }#
            if (ncol(x) == 1) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must supply both 'x' and 'y' or a 2-column matrix-like 'x'")#
                coord <- list(x = x, y = y)#
            }#
        }#
        if (!is.list(x)) {#
            if (is.vector(x) & !is.numeric(x)) #
                stop("'x' must be numeric")#
            if (is.vector(x) & is.numeric(x)) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must either provide both 'x' and 'y' or a 2-column matrix-like 'x'")#
                if (length(x) != length(y)) #
                  warning("The lengths of 'x' and 'y' differ. Some values have been recycled\n")#
                coord <- list(x = x, y = y)#
            }#
        }#
    }
coord
lon <- as.numeric(rownames(mat))#
    lat <- as.numeric(colnames(mat))
lon
lat
outside.lon <- any(findInterval(coord$x, range(lon), rightmost.closed = TRUE) != #
        1)#
    outside.lat <- any(findInterval(coord$y, range(lat), rightmost.closed = TRUE) != #
        1)
outside.lon
outside.lat
out <- data.frame(Lon = coord$x, Lat = coord$y)
out
ls()
out$Depth <- apply(out, 1, function(x) mat[which(abs(lon - #
        x[1]) == min(abs(lon - x[1]))), which(abs(lat - x[2]) == #
        min(abs(lat - x[2])))])
out
mat[which(abs(lon - #
+         out[1,1]) == min(abs(lon - out[1,1]))), which(abs(lat - out[1,2]) == #
+         min(abs(lat - out[1,2])))]
out
glat<-seq(27.1,30.1,1)#
glon<-c(-93.1,-94.1,-95.1,-96.1)
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist=T)
get.depth <- function (mat, x, y = NULL, locator = TRUE, distance = FALSE, #
    ...) #
{#
    if (!is(mat, "bathy")) #
        stop("'mat' must be of class 'bathy'")#
    if (locator == FALSE) {#
        if (!is.null(y) & !is.vector(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (!is.null(y) & !is.numeric(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (is.list(x)) {#
            if (length(x) != 2) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.vector(x[[1]]) | !is.vector(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (length(x[[1]]) != length(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.null(y)) #
                warning("'y' has been ignored\n")#
            coord <- x#
            names(coord) <- c("x", "y")#
        }#
        if (is.data.frame(x) | is.matrix(x)) {#
            x <- as.matrix(x)#
            if (ncol(x) > 2) {#
                warning("'x' has too many columns. Only the first two will be considered\n")#
                x <- x[, 1:2]#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("only the first two columns of 'x' were considered. 'y' has been ignored\n")#
            }#
            if (ncol(x) == 2) {#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("since 'x' has 2 columns, 'y' has been ignored\n")#
            }#
            if (ncol(x) == 1) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must supply both 'x' and 'y' or a 2-column matrix-like 'x'")#
                coord <- list(x = x, y = y)#
            }#
        }#
        if (!is.list(x)) {#
            if (is.vector(x) & !is.numeric(x)) #
                stop("'x' must be numeric")#
            if (is.vector(x) & is.numeric(x)) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must either provide both 'x' and 'y' or a 2-column matrix-like 'x'")#
                if (length(x) != length(y)) #
                  warning("The lengths of 'x' and 'y' differ. Some values have been recycled\n")#
                coord <- list(x = x, y = y)#
            }#
        }#
    }#
    else {#
        cat("Waiting for interactive input: click any number of times on the map, then press 'Esc'\n")#
        coord <- locator(type = "p", ...)#
    }#
    lon <- as.numeric(rownames(mat))#
    lat <- as.numeric(colnames(mat))#
    outside.lon <- any(findInterval(coord$x, range(lon), rightmost.closed = TRUE) != #
        1)#
    outside.lat <- any(findInterval(coord$y, range(lat), rightmost.closed = TRUE) != #
        1)#
    if (outside.lon | outside.lat) #
        stop("Some data points are oustide the range of mat")#
    out <- data.frame(Lon = coord$x, Lat = coord$y)#
    out$Depth <- apply(out, 1, function(x) mat[which(abs(lon - #
        x[1]) == min(abs(lon - x[1]))), which(abs(lat - x[2]) == #
        min(abs(lat - x[2])))])[1]#
    if (distance) {#
        if (nrow(out) == 1) #
            stop("Cannot compute distance with only one point. Either set distance=FALSE or add more points")#
        deg2km <- function(x1, y1, x2, y2) {#
            x1 <- x1 * pi/180#
            y1 <- y1 * pi/180#
            x2 <- x2 * pi/180#
            y2 <- y2 * pi/180#
            dx <- x2 - x1#
            dy <- y2 - y1#
            fo <- sin(dy/2)^2 + cos(y1) * cos(y2) * sin(dx/2)^2#
            fos <- 2 * asin(min(1, sqrt(fo)))#
            return(6371 * fos)#
        }#
        dist.km = NULL#
        for (i in 1:length(out$Depth)) {#
            dist.km = c(dist.km, deg2km(x1 = out$Lon[1], y1 = out$Lat[1], #
                x2 = out$Lon[i], y2 = out$Lat[i]))#
        }#
        out$Dist.km <- dist.km#
    }#
    return(out)#
}
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist=T)
glat<-seq(27,29,1)#
glon<-rep(-93,length(glat))#
data.frame(glon,glat)#
get.depth(gombathy, x=glon, y=glat, locator=FALSE)
get.depth <- function (mat, x, y = NULL, locator = TRUE, distance = FALSE, #
    ...) #
{#
    if (!is(mat, "bathy")) #
        stop("'mat' must be of class 'bathy'")#
    if (locator == FALSE) {#
        if (!is.null(y) & !is.vector(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (!is.null(y) & !is.numeric(y)) #
            stop("'y' must be a numeric vector or NULL")#
        if (is.list(x)) {#
            if (length(x) != 2) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.vector(x[[1]]) | !is.vector(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (length(x[[1]]) != length(x[[2]])) #
                stop("if 'x' is a list, it must contain only two vectors of the same length (longitude and latitude)")#
            if (!is.null(y)) #
                warning("'y' has been ignored\n")#
            coord <- x#
            names(coord) <- c("x", "y")#
        }#
        if (is.data.frame(x) | is.matrix(x)) {#
            x <- as.matrix(x)#
            if (ncol(x) > 2) {#
                warning("'x' has too many columns. Only the first two will be considered\n")#
                x <- x[, 1:2]#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("only the first two columns of 'x' were considered. 'y' has been ignored\n")#
            }#
            if (ncol(x) == 2) {#
                coord <- list(x = x[, 1], y = x[, 2])#
                if (!is.null(y)) #
                  warning("since 'x' has 2 columns, 'y' has been ignored\n")#
            }#
            if (ncol(x) == 1) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must supply both 'x' and 'y' or a 2-column matrix-like 'x'")#
                coord <- list(x = x, y = y)#
            }#
        }#
        if (!is.list(x)) {#
            if (is.vector(x) & !is.numeric(x)) #
                stop("'x' must be numeric")#
            if (is.vector(x) & is.numeric(x)) {#
                if (is.null(y)) #
                  stop("with 'locator=FALSE', you must either provide both 'x' and 'y' or a 2-column matrix-like 'x'")#
                if (length(x) != length(y)) #
                  warning("The lengths of 'x' and 'y' differ. Some values have been recycled\n")#
                coord <- list(x = x, y = y)#
            }#
        }#
    }#
    else {#
        cat("Waiting for interactive input: click any number of times on the map, then press 'Esc'\n")#
        coord <- locator(type = "p", ...)#
    }#
    lon <- as.numeric(rownames(mat))#
    lat <- as.numeric(colnames(mat))#
    outside.lon <- any(findInterval(coord$x, range(lon), rightmost.closed = TRUE) != #
        1)#
    outside.lat <- any(findInterval(coord$y, range(lat), rightmost.closed = TRUE) != #
        1)#
    if (outside.lon | outside.lat) #
        stop("Some data points are oustide the range of mat")#
    out <- data.frame(Lon = coord$x, Lat = coord$y)#
    out$Depth <- apply(out, 1, function(x) mat[which(abs(lon - #
        x[1]) == min(abs(lon - x[1]))), which(abs(lat - x[2]) == #
        min(abs(lat - x[2])))][1])#
    if (distance) {#
        if (nrow(out) == 1) #
            stop("Cannot compute distance with only one point. Either set distance=FALSE or add more points")#
        deg2km <- function(x1, y1, x2, y2) {#
            x1 <- x1 * pi/180#
            y1 <- y1 * pi/180#
            x2 <- x2 * pi/180#
            y2 <- y2 * pi/180#
            dx <- x2 - x1#
            dy <- y2 - y1#
            fo <- sin(dy/2)^2 + cos(y1) * cos(y2) * sin(dx/2)^2#
            fos <- 2 * asin(min(1, sqrt(fo)))#
            return(6371 * fos)#
        }#
        dist.km = NULL#
        for (i in 1:length(out$Depth)) {#
            dist.km = c(dist.km, deg2km(x1 = out$Lon[1], y1 = out$Lat[1], #
                x2 = out$Lon[i], y2 = out$Lat[i]))#
        }#
        out$Dist.km <- dist.km#
    }#
    return(out)#
}
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist=T)
glat<-seq(27.1,30.1,1)#
glon<-c(-93.1,-94.1,-95.1,-96.1)
get.depth(gombathy, x=data.frame(glon,glat), locator=FALSE, dist=T)
example(complete.case)
library(knit)
library(knitr)
update.packages(ask=F)
?evaluate
install.packages("gstat")
install.packages("gstat",type="source")
library(marmap)
?marmap
library(hierfstat)
install.packages("hierfstat")
library(hierfstat)
?hierfstat
?marmap
citation(marmap)
citation("marmap")
citation("hierfstat")
?marmap
library(marmap)
?marmap
2+5
hist(rnorm(100000))
2+7#
hist(rnorm(10000))
getwd()
setwd('/Users/bsimonbo/Dropbox/In Progress/_development marmap')
library(devtools)#
install_github("ericpante/marmap")
library(marmap)
dat <- read.bathy("2010-10-04 20x20.xyz", sep=" ")
setwd("~/Desktop/") ; dat <- read.bathy("2010-10-04 20x20.xyz", sep=" ")
?marmap
read.bathy
plot(dat,im=T,lwd=.1)
summary(dat)
setwd("~/Desktop/") ; dat <- read.bathy("2010-10-04 20x20.xyz")
dat2 <- read.table("2010-10-04 20x20.xyz", sep=" ")
dat <- as.bathy(dat2)
summary(dat)
bath <- dat2
setwd('/Users/bsimonbo/Dropbox/In Progress/_development marmap/marmap/R')
bath <- bath[order(bath[, 2], bath[, 1], decreasing = FALSE), ]#
#
	    lat <- unique(bath[, 2]) ; bcol <- length(lat)#
	    lon <- unique(bath[, 1]) ; brow <- length(lon)
setwd('/Users/bsimonbo/Dropbox/In Progress/_development marmap/marmap/R')
if ((bcol*brow) == nrow(bath)) {#
			bathy <- matrix(bath[, 3], nrow = brow, ncol = bcol, byrow = FALSE, dimnames = list(lon, lat))#
			} else {#
				colnames(bath) <- paste("V",1:3,sep="")#
				bathy <- unclass(as.matrix(reshape::cast(bath, V1~V2, value="V3")))#
			}
class(bathy)
setwd('/Users/bsimonbo/Dropbox/In Progress/_development marmap/marmap/R')
ordered.mat <- check.bathy(bathy)
colnames(bath)
rownames(bath)
rownames(bathy)
colnames(bathy)
head(bathy)
